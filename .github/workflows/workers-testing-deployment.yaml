name: Workflow for developing against Akamai

on:
  push:
    branches:
      # We know that many teams work from a single repository vs a forking workflow.  
      # We want to help those teams avoid redundant builds for the push to the branch AND a pull-request.
      # These rules help provide sane baselines.  Pull requests , main (standard default branch), and any branch prefixed with integration will build. 
      # Need a stable environment for an integration envrionment?  Prefix with integration!
      - main
      - 'integration*'
      # Apologies to the docs folks.  This base setup doesn't have any liting/docs standards so we aren't triggering builds here.  
      # That being said you could probably come up with something and remove this ignore!   
    paths-ignore:
      - '**/*.md'
      - "development.Dockerfile"

  pull_request:
    paths-ignore:
      - '**/*.md'
      - "development.Dockerfile"
    # Types defaults to [opened, synchronize reopened]. 
    # Closed has to be added explicitly so that merged branches clean up their resources! 
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    types:
      - opened
      - synchronize
      - reopened
      - closed
  # We want to make sure that resources are reclaimed when a branch is deleted.
  delete:

jobs:
  # This job is the place to add your coding standard checks. By default we are just running tflint for our terraform code.  You can be more creative!
  lint:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize'))
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/akamai-consulting/akamai-starterkit:dev-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run a command
        run: tflint
        working-directory: terraform

  # The deployment_name_builder will allow you to override the branch or PR name for use in environment deployment. 
  # This job is silly and only exists to work around a quirk of GitHub Actions.
  # The deployment/environment URL is evaluated at the start of a job. 
  # The only way to control it is to set the value in an earlier job and pass that along.
  # See here: https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
  deployment_name_builder:
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{ vars.BASE_URL }}
     
    outputs:
      deployment_name: ${{ steps.set_env_step.outputs.deployment_name }}
      deployment_url: ${{ steps.set_env_step.outputs.deployment_url }}

    # We are simply overriding the branch name of main and mapping it to the deployment name of production. 
    steps:
      - name: Set environment name
        id: set_env_step
        run: | 
              if [ "${{ github.event_name }}" = "pull_request" ]; then
                ref_name="PR${{ github.event.pull_request.number }}"
              else
                ref_name="${{ github.ref_name }}"
                ref_name=$(echo "$ref_name" | sed 's/integration-//')
                case "$ref_name" in
                  "main")
                    ref_name="production"
                    ;;
                  "override2")
                    ref_name="newvalue2"
                    ;;
                  *)
                    ;;
                esac
              fi
              
              echo "deployment_name=$ref_name" >> $GITHUB_OUTPUT
              echo "deployment_url=$ref_name.$BASE_URL" >> $GITHUB_OUTPUT
              echo "Final value of ref_name: $ref_name"
              env

  # This deloyment example leverages OpenTofu.  However, the build container also has Terraform installed.  
  # There are some recent controversies on changes in licensing terms with Terraform driving some to OpenTofu.  
  # We aren't lawyers. Use what you want! 
  # See: https://opentofu.org/
  #      https://www.thestack.technology/oracle-dumps-terraform-for-opentofu/
  deployment:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize'))
    runs-on: ubuntu-latest
    needs:  deployment_name_builder
    container:
      image: ghcr.io/akamai-consulting/akamai-starterkit:dev-build
    # All these environment variables need to defined in your GitHub Actions enabled repository 
    # See here for how to set env variables: https://docs.github.com/en/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows
    # See here for how to set secrets: https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions

    env:
      TF_VAR_group_id: ${{ secrets.GROUP_ID }}
      TF_VAR_property_id: ${{ secrets.PROPERTY_ID }}
      TF_VAR_contract_id: ${{ secrets.CONTRACT_ID }}
      TF_VAR_deployment_name: ${{needs.deployment_name_builder.outputs.deployment_name}}
      AWS_ACCESS_KEY_ID: ${{ secrets.LINODE_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.LINODE_SECRET_KEY }}
      AKAMAI_ACCOUNT_KEY: ${{ secrets.AKAMAI_ACCOUNT_KEY }}
    environment: 
      name: ${{needs.deployment_name_builder.outputs.deployment_name}}
      url: https://${{needs.deployment_name_builder.outputs.deployment_url}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # NOTE you must define EDGERC in your secrets.
      # See here for setting up API credentials: https://techdocs.akamai.com/developer/docs/set-up-authentication-credentials
      - name: Write secret to file
        run: echo "${{ secrets.EDGERC }}" > ~/.edgerc

      # This approach leverages terraform workspaces to manage state independently for each environment.
      # In our case we simply map branchname or PullRequst number to environment or deployment. 
      # With Terraform workspaces each branch and each PR gets its own statefile.  They are isolated from
      # one another!
      #
      # See: https://spacelift.io/blog/terraform-workspaces
      #      https://developer.hashicorp.com/terraform/language/state/workspaces
      #      https://developer.hashicorp.com/terraform/cli/workspaces
      - name: 'Terraform Init'
        run: |
          if [ "${{ github.ref_name }}" = "${{ github.event.repository.default_branch }}" ]; then
            workspace_key_prefix="terraform/production/workspace"
          else
            workspace_key_prefix="terraform/ci/workspace"
          fi

          tofu init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET_NAME }}" \
            -backend-config="workspace_key_prefix=$workspace_key_prefix"
        working-directory: terraform

      - name: 'Terraform Workspace'
        run: |
          if tofu workspace select "$TF_VAR_deployment_name" ; then
            echo "Workspace already exists"
          else
            tofu workspace new "$TF_VAR_deployment_name"
          fi
        working-directory: terraform  

      # This is an annoying work around.  Repetitive calls to TF will expect that the bundle/tar exist. Without this `tofu apply` will fail on repetitive builds.       
      - name: Prepare edge worker bundle
        run: tar -czvf ../terraform/edge-worker-bundle.tgz *
        working-directory: edge-worker

      - name: Test the plan
        run: tofu plan 
        working-directory: terraform  
      
      - name: Deploy Terraform Infrastructure as Code(IaC)
        run: tofu apply -auto-approve
        working-directory: terraform
      # Terraform will complete within about 5 min.  
      # However, edge domain and SSL certificate deployment take time beyond that 5 min.
      # This step is designed to give us an accurage indicator of when the environment is ready.
      - name: Check Akamai Deployment
        env:
          AKAMAI_SECTION: default
        run: |
          # Loop until the status is "DEPLOYED"
          while true; do
            # Run the command and save the output
            # Note there is a known deprecation warning coming from Akamai CLI:
            # https://github.com/akamai/cli-property-manager/issues/87

            output=$(akamai property-manager -a $AKAMAI_ACCOUNT_KEY --section default list-property-hostnames -p "$TF_VAR_deployment_name" --file results.json)

            # Parse the output with jq and check the status
            status=$(jq -r '.[0].certStatus.staging[0].status' results.json)

            if [ "$status" = "DEPLOYED" ]; then
              echo "The certificate for staging is deployed."
              break
            else
              echo "The certificate for staging is not deployed. Checking again in 60 seconds..."
              sleep 60
            fi
          done
  # This job is designed to run when a branch is deleted, or a PR is closed or merged.  It will run tofu destroy to tear-down any resources created earlier. 
  cleanup:
    if: github.event_name == 'delete' || github.event.action == 'closed'
    runs-on: ubuntu-latest
    needs: deployment_name_builder
    container:
      image: ghcr.io/akamai-consulting/akamai-starterkit:dev-build
    env:
      TF_VAR_group_id: ${{ secrets.GROUP_ID }}
      TF_VAR_property_id: ${{ secrets.PROPERTY_ID }}
      TF_VAR_contract_id: ${{ secrets.CONTRACT_ID }}
      TF_VAR_deployment_name: ${{needs.deployment_name_builder.outputs.deployment_name}}

      AWS_ACCESS_KEY_ID: ${{ secrets.LINODE_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.LINODE_SECRET_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Write secret to file
        run: echo "${{ secrets.EDGERC }}" > ~/.edgerc

      - name: 'Terraform Init'
        run: |
          if [ "${{ github.ref_name }}" = "${{ github.event.repository.default_branch }}" ]; then
            workspace_key_prefix="terraform/production/workspace"
          else
            workspace_key_prefix="terraform/ci/workspace"
          fi

          tofu init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET_NAME }}" \
            -backend-config="workspace_key_prefix=$workspace_key_prefix"
        working-directory: terraform

      - name: 'Terraform Workspace'
        run: |
          if tofu workspace select "$TF_VAR_deployment_name" ; then
            echo "Workspace already exists"
          else
            tofu workspace new "$TF_VAR_deployment_name"
          fi
        working-directory: terraform  

      # This is an annoying work around.  Repetitive calls to TF will expect that the bundle/tar exist. Without this tofu apply will fail.       
      - name: Prepare edge worker bundle
        run: tar -czvf ../terraform/edge-worker-bundle.tgz *
        working-directory: edge-worker

      - name: Terraform Destroy
        run: tofu destroy -auto-approve
        working-directory: terraform

      # It's hard to believe that there is no better way to inactivate a deployment once it is no longer needed.
      - name: Delete environment
        run: |
          curl -X DELETE \
            -H "Authorization: Bearer ${{ secrets.ENV_DELETION_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/environments/${{needs.deployment_name_builder.outputs.deployment_name}}"

    environment: 
      name: ${{needs.deployment_name_builder.outputs.deployment_name}}
      url: https://${{needs.deployment_name_builder.outputs.deployment_url}}
